'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VoiceText = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _joi = require('joi');

var _joi2 = _interopRequireDefault(_joi);

var _util = require('util');

var _querystring = require('querystring');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _request = require('request');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var postRequestAsync = (0, _bluebird.promisify)(_request.post);

// @class VoiceText

var VoiceText = exports.VoiceText = function () {
  function VoiceText() {
    var key = arguments.length <= 0 || arguments[0] === undefined ? process.env.VOICETEXT_APIKEY : arguments[0];

    _classCallCheck(this, VoiceText);

    this.key = key;
  }
  // @see https://cloud.voicetext.jp/webapi/docs/api#section-4
  // @see https://github.com/hapijs/joi/blob/v8.0.5/API.md


  _createClass(VoiceText, [{
    key: 'validate',
    value: function validate() {
      var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

      return _joi2.default.attempt(data, this.constructor.validationSchema);
    }
  }, {
    key: 'getUri',
    value: function getUri(key, data) {
      return (0, _util.format)('https://%s:%s@api.voicetext.jp/v1/tts?%s', key, '', (0, _querystring.stringify)(this.validate(data)));
    }
  }, {
    key: 'stream',
    value: function stream() {
      var text = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
      var data = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      return (0, _request.post)(this.getUri(this.key, _extends({ text: text }, data)), { encoding: null });
    }
  }, {
    key: 'fetch',
    value: function fetch() {
      var text = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
      var data = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      try {
        return postRequestAsync(this.getUri(this.key, _extends({ text: text }, data)), { encoding: null });
      } catch (error) {
        return _bluebird2.default.reject(error);
      }
    }
  }, {
    key: 'fetchBuffer',
    value: function fetchBuffer() {
      return this.fetch.apply(this, arguments).then(function (response) {
        return response.body;
      });
    }
  }]);

  return VoiceText;
}();

VoiceText.validationSchema = _joi2.default.object({
  text: _joi2.default.string().min(1).max(200).required(),
  speaker: _joi2.default.string().valid('hikari', 'haruka', 'takeru', 'santa', 'bear', 'show').default('hikari'),
  format: _joi2.default.string().valid('wav', 'ogg', 'aac').default('ogg'),
  emotion: _joi2.default.string().valid('happiness', 'anger', 'sadness'),
  emotion_level: _joi2.default.number().min(1).max(4).when('emotion', { is: true, then: _joi2.default.default(2) }),
  pitch: _joi2.default.number().min(50).max(200).default(100),
  speed: _joi2.default.number().min(50).max(400).default(100),
  volume: _joi2.default.number().min(50).max(200).default(100)
}).optionalKeys('emotion', 'emotion_level', 'pitch', 'speed', 'volume').with('emotion_level', 'emotion');
exports.default = new VoiceText();
//# sourceMappingURL=index.js.map